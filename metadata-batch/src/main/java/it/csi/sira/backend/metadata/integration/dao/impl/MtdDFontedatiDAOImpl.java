/*
 * Created on 18 nov 2016 ( Time 17:08:42 )
 * Generated by Telosys Tools Generator ( version 2.1.1 )
 */
package it.csi.sira.backend.metadata.integration.dao.impl;

import java.sql.ResultSet;
import java.sql.SQLException;

import it.csi.sira.backend.metadata.integration.dto.MtdDFontedati;
import it.csi.sira.backend.metadata.integration.dao.MtdDFontedatiDAO;
import it.csi.sira.backend.metadata.utils.GenericDAO;
import org.springframework.jdbc.core.RowMapper;

/**
 * MtdDFontedati DAO implementation 
 * 
 * @author Telosys Tools
 *
 */
public class MtdDFontedatiDAOImpl extends GenericDAO<MtdDFontedati> implements MtdDFontedatiDAO {
	//----------------------------------------------------------------------
	/**
	 * DAO constructor
	 */
	public MtdDFontedatiDAOImpl() {
		super();
	}

	private final static String QUERY_PRIMARY_KEY = 
		"select * from bifisic_mtd_d_datasource where id_datasource = :id_datasource";
	
	private final static String QUERY_INSERT = 
		"insert into bifisic_mtd_d_datasource(id_datasource,fk_standard_expos,des_datasource,url_prefix_metadata,url_service,fl_active,prefix_datasource) values(:id_datasource,:fk_standard_expos,:des_datasource,:url_prefix_metadata,:url_service,:fl_active,:prefix_datasource)";

	private final static String QUERY_UPDATE = 
		"update bifisic_mtd_d_datasource set fk_standard_expos = :fk_standard_expos, des_datasource = :des_datasource, url_prefix_metadata = :url_prefix_metadata, url_service = :url_service, fl_active = :fl_active, prefix_datasource = :prefix_datasource  where id_datasource = :id_datasource";

	private final static String QUERY_DELETE = 
		"delete from bifisic_mtd_d_datasource where  id_datasource = :id_datasource";

	private final static String SQL_COUNT_ALL = 
		"select count(*) from bifisic_mtd_d_datasource";
	
	@Override
	public String getPrimaryKeySelect() {
		return QUERY_PRIMARY_KEY;		
	}
	
	@Override
	public String getTableName(){
		return "bifisic_mtd_d_datasource";
	}

	@Override
	public String getSqlSelect() {
		return "select * from bifisic_mtd_d_datasource";
	}

	@Override
	public String getSqlInsert() {
		return QUERY_INSERT;
	}

	@Override
	public String getSqlUpdate() {
		return QUERY_UPDATE;
	}

	@Override
	public String getSqlDelete() {
		return QUERY_DELETE;
	}

	@Override
	public String getSqlCount() {
		return SQL_COUNT_ALL;
	}

	public MtdDFontedati findByPK(Integer idFontedati) {
		java.util.Map<String, Object> map = new java.util.HashMap<String, Object>();
		map.put("id_datasource", idFontedati);
		return super.findByPK(map);		
	}

	public int deleteByPK(Integer idFontedati) {
		java.util.Map<String, Object> map = new java.util.HashMap<String, Object>();
		map.put("id_datasource", idFontedati);
		return super.delete(getSqlDelete(), map);		
	}

	@Override
	public java.util.Map<String, Object> getValuesForInsert(MtdDFontedati MtdDFontedati) {
		java.util.Map<String, Object> map = new java.util.HashMap<String, Object>();
		map.put("id_datasource", MtdDFontedati.getIdFontedati());
		map.put("fk_standard_expos", MtdDFontedati.getFkStandardEspos());
		map.put("des_datasource", MtdDFontedati.getDesFontedati());
		map.put("url_prefix_metadata", MtdDFontedati.getUrlPrefissoMetadato());
		map.put("url_service", MtdDFontedati.getUrlServizio());
		map.put("fl_active", MtdDFontedati.getFlAttiva());
		map.put("prefix_datasource", MtdDFontedati.getPrefissoFontedati());
		return map;
	}

	@Override
	public java.util.Map<String, Object> getValuesForUpdate(MtdDFontedati MtdDFontedati) {
		java.util.Map<String, Object> map = new java.util.HashMap<String, Object>();
		map.put("fk_standard_expos", MtdDFontedati.getFkStandardEspos());
		map.put("des_datasource", MtdDFontedati.getDesFontedati());
		map.put("url_prefix_metadata", MtdDFontedati.getUrlPrefissoMetadato());
		map.put("url_service", MtdDFontedati.getUrlServizio());
		map.put("fl_active", MtdDFontedati.getFlAttiva());
		map.put("prefix_datasource", MtdDFontedati.getPrefissoFontedati());
		map.put("id_datasource", MtdDFontedati.getIdFontedati());
		return map;
	}

	public java.util.Map<String, Object> getValuesForPrimaryKey(MtdDFontedati MtdDFontedati) {
		java.util.Map<String, Object> map = new java.util.HashMap<String, Object>();
		map.put("id_datasource", MtdDFontedati.getIdFontedati());
		return map;
	}

	@Override
	public java.util.Map<String, Object> getValuesForDelete(MtdDFontedati MtdDFontedati) {
		java.util.Map<String, Object> map = new java.util.HashMap<String, Object>();
		map.put("id_datasource", MtdDFontedati.getIdFontedati());
		return map;
	}

	@Override
	public RowMapper<MtdDFontedati> getRowMapper()  {
		//--- RowMapper to populate a new bean instance
		//return new MtdDFontedatiRowMapper( new MtdDFontedati() ) ;

       return new MtdDFontedatiRowMapper() ;
	}

	//----------------------------------------------------------------------
	/**
	 * Populates the given bean with the data retrieved from the given ResultSet
	 * @param rs
	 * @param MtdDFontedati
	 * @throws SQLException
	 */
	private static void populateBean(ResultSet rs, MtdDFontedati MtdDFontedati) throws SQLException {

		//--- Set data from ResultSet to Bean attributes
		MtdDFontedati.setIdFontedati(rs.getInt("id_datasource")); // java.lang.Integer
		if ( rs.wasNull() ) { MtdDFontedati.setIdFontedati(null); }; // not primitive number => keep null value if any
		MtdDFontedati.setFkStandardEspos(rs.getInt("fk_standard_expos")); // java.lang.Integer
		if ( rs.wasNull() ) { MtdDFontedati.setFkStandardEspos(null); }; // not primitive number => keep null value if any
		MtdDFontedati.setDesFontedati(rs.getString("des_datasource")); // java.lang.String
		MtdDFontedati.setUrlPrefissoMetadato(rs.getString("url_prefix_metadata")); // java.lang.String
		MtdDFontedati.setUrlServizio(rs.getString("url_service")); // java.lang.String
		MtdDFontedati.setFlAttiva(rs.getString("fl_active")); // java.lang.String
		MtdDFontedati.setPrefissoFontedati(rs.getString("prefix_datasource")); // java.lang.String
	}


	/**
	 * Specific inner class for 'RowMapper' implementation
	 */
	public static class MtdDFontedatiRowMapper implements RowMapper<MtdDFontedati> {
	
		public MtdDFontedatiRowMapper() {
			
		}
		
		public MtdDFontedati mapRow(ResultSet rs, int rowNum) throws SQLException {
			MtdDFontedati bean = new MtdDFontedati();
			populateBean(rs, bean);
			return bean;
		}
	}
}
