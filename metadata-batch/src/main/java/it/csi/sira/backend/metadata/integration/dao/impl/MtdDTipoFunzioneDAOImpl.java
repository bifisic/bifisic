/*
 * Created on 18 nov 2016 ( Time 17:08:43 )
 * Generated by Telosys Tools Generator ( version 2.1.1 )
 */
package it.csi.sira.backend.metadata.integration.dao.impl;

import java.sql.ResultSet;
import java.sql.SQLException;

import it.csi.sira.backend.metadata.integration.dto.MtdDTipoFunzione;
import it.csi.sira.backend.metadata.integration.dao.MtdDTipoFunzioneDAO;
import it.csi.sira.backend.metadata.utils.GenericDAO;
import org.springframework.jdbc.core.RowMapper;

/**
 * MtdDTipoFunzione DAO implementation 
 * 
 * @author Telosys Tools
 *
 */
public class MtdDTipoFunzioneDAOImpl extends GenericDAO<MtdDTipoFunzione> implements MtdDTipoFunzioneDAO {
	//----------------------------------------------------------------------
	/**
	 * DAO constructor
	 */
	public MtdDTipoFunzioneDAOImpl() {
		super();
	}

	private final static String QUERY_PRIMARY_KEY = 
		"select * from bifisic_mtd_d_function_type where id_function_type = :id_function_type";
	
	private final static String QUERY_INSERT = 
		"insert into bifisic_mtd_d_function_type(id_function_type,des_function_type,protocol,field) values(:id_function_type,:des_function_type,:protocol,:field)";

	private final static String QUERY_UPDATE = 
		"update bifisic_mtd_d_function_type set des_function_type = :des_function_type, protocol = :protocol, field = :field  where id_function_type = :id_function_type";

	private final static String QUERY_DELETE = 
		"delete from bifisic_mtd_d_function_type where  id_function_type = :id_function_type";

	private final static String SQL_COUNT_ALL = 
		"select count(*) from bifisic_mtd_d_function_type";
	
	@Override
	public String getPrimaryKeySelect() {
		return QUERY_PRIMARY_KEY;		
	}
	
	@Override
	public String getTableName(){
		return "bifisic_mtd_d_function_type";
	}

	@Override
	public String getSqlSelect() {
		return "select * from bifisic_mtd_d_function_type";
	}

	@Override
	public String getSqlInsert() {
		return QUERY_INSERT;
	}

	@Override
	public String getSqlUpdate() {
		return QUERY_UPDATE;
	}

	@Override
	public String getSqlDelete() {
		return QUERY_DELETE;
	}

	@Override
	public String getSqlCount() {
		return SQL_COUNT_ALL;
	}

	public MtdDTipoFunzione findByPK(Integer idTipoFunzione) {
		java.util.Map<String, Object> map = new java.util.HashMap<String, Object>();
		map.put("id_function_type", idTipoFunzione);
		return super.findByPK(map);		
	}

	public int deleteByPK(Integer idTipoFunzione) {
		java.util.Map<String, Object> map = new java.util.HashMap<String, Object>();
		map.put("id_function_type", idTipoFunzione);
		return super.delete(getSqlDelete(), map);		
	}

	@Override
	public java.util.Map<String, Object> getValuesForInsert(MtdDTipoFunzione MtdDTipoFunzione) {
		java.util.Map<String, Object> map = new java.util.HashMap<String, Object>();
		map.put("id_function_type", MtdDTipoFunzione.getIdTipoFunzione());
		map.put("des_function_type", MtdDTipoFunzione.getDesTipoFunzione());
		map.put("protocol", MtdDTipoFunzione.getProtocollo());
		map.put("field", MtdDTipoFunzione.getCampo());
		return map;
	}

	@Override
	public java.util.Map<String, Object> getValuesForUpdate(MtdDTipoFunzione MtdDTipoFunzione) {
		java.util.Map<String, Object> map = new java.util.HashMap<String, Object>();
		map.put("des_function_type", MtdDTipoFunzione.getDesTipoFunzione());
		map.put("protocol", MtdDTipoFunzione.getProtocollo());
		map.put("id_function_type", MtdDTipoFunzione.getIdTipoFunzione());
		map.put("field", MtdDTipoFunzione.getCampo());
		return map;
	}

	public java.util.Map<String, Object> getValuesForPrimaryKey(MtdDTipoFunzione MtdDTipoFunzione) {
		java.util.Map<String, Object> map = new java.util.HashMap<String, Object>();
		map.put("id_function_type", MtdDTipoFunzione.getIdTipoFunzione());
		return map;
	}

	@Override
	public java.util.Map<String, Object> getValuesForDelete(MtdDTipoFunzione MtdDTipoFunzione) {
		java.util.Map<String, Object> map = new java.util.HashMap<String, Object>();
		map.put("id_function_type", MtdDTipoFunzione.getIdTipoFunzione());
		return map;
	}

	@Override
	public RowMapper<MtdDTipoFunzione> getRowMapper()  {
		//--- RowMapper to populate a new bean instance
		//return new MtdDTipoFunzioneRowMapper( new MtdDTipoFunzione() ) ;

       return new MtdDTipoFunzioneRowMapper() ;
	}

	//----------------------------------------------------------------------
	/**
	 * Populates the given bean with the data retrieved from the given ResultSet
	 * @param rs
	 * @param MtdDTipoFunzione
	 * @throws SQLException
	 */
	private static void populateBean(ResultSet rs, MtdDTipoFunzione MtdDTipoFunzione) throws SQLException {

		//--- Set data from ResultSet to Bean attributes
		MtdDTipoFunzione.setIdTipoFunzione(rs.getInt("id_function_type")); // java.lang.Integer
		if ( rs.wasNull() ) { MtdDTipoFunzione.setIdTipoFunzione(null); }; // not primitive number => keep null value if any
		MtdDTipoFunzione.setDesTipoFunzione(rs.getString("des_function_type")); // java.lang.String
		MtdDTipoFunzione.setProtocollo(rs.getString("protocol")); // java.lang.String
		MtdDTipoFunzione.setCampo(rs.getString("field"));
	}


	/**
	 * Specific inner class for 'RowMapper' implementation
	 */
	public static class MtdDTipoFunzioneRowMapper implements RowMapper<MtdDTipoFunzione> {
	
		public MtdDTipoFunzioneRowMapper() {
			
		}
		
		public MtdDTipoFunzione mapRow(ResultSet rs, int rowNum) throws SQLException {
			MtdDTipoFunzione bean = new MtdDTipoFunzione();
			populateBean(rs, bean);
			return bean;
		}
	}
}
