/*
 * Created on 18 nov 2016 ( Time 17:08:43 )
 * Generated by Telosys Tools Generator ( version 2.1.1 )
 */
package it.csi.sira.backend.metadata.integration.dao.impl;

import java.sql.ResultSet;
import java.sql.SQLException;

import it.csi.sira.backend.metadata.integration.dto.MtdTFunzione;
import it.csi.sira.backend.metadata.integration.dao.MtdTFunzioneDAO;
import it.csi.sira.backend.metadata.utils.GenericDAO;
import org.springframework.jdbc.core.RowMapper;

/**
 * MtdTFunzione DAO implementation 
 * 
 * @author Telosys Tools
 *
 */
public class MtdTFunzioneDAOImpl extends GenericDAO<MtdTFunzione> implements MtdTFunzioneDAO {
	//----------------------------------------------------------------------
	/**
	 * DAO constructor
	 */
	public MtdTFunzioneDAOImpl() {
		super();
	}

	private final static String QUERY_PRIMARY_KEY = 
		"select * from bifisic_mtd_t_function where id_function = :id_function";
	
	private final static String QUERY_INSERT = 
		"insert into bifisic_mtd_t_function(id_function,fk_function_type,fk_metadata,request_url) values(:id_function,:fk_function_type,:fk_metadata,:request_url)";

	private final static String QUERY_UPDATE = 
		"update bifisic_mtd_t_function set fk_function_type = :fk_function_type, fk_metadata = :fk_metadata, request_url = :request_url  where id_function = :id_function";

	private final static String QUERY_DELETE = 
		"delete from bifisic_mtd_t_function where  id_function = :id_function";

	private final static String SQL_COUNT_ALL = 
		"select count(*) from bifisic_mtd_t_function";
	
	@Override
	public String getPrimaryKeySelect() {
		return QUERY_PRIMARY_KEY;		
	}
	
	@Override
	public String getTableName(){
		return "bifisic_mtd_t_function";
	}

	@Override
	public String getSqlSelect() {
		return "select * from bifisic_mtd_t_function";
	}

	@Override
	public String getSqlInsert() {
		return QUERY_INSERT;
	}

	@Override
	public String getSqlUpdate() {
		return QUERY_UPDATE;
	}

	@Override
	public String getSqlDelete() {
		return QUERY_DELETE;
	}

	@Override
	public String getSqlCount() {
		return SQL_COUNT_ALL;
	}

	public MtdTFunzione findByPK(Integer idFunzione) {
		java.util.Map<String, Object> map = new java.util.HashMap<String, Object>();
		map.put("id_function", idFunzione);
		return super.findByPK(map);		
	}

	public int deleteByPK(Integer idFunzione) {
		java.util.Map<String, Object> map = new java.util.HashMap<String, Object>();
		map.put("id_function", idFunzione);
		return super.delete(getSqlDelete(), map);		
	}

	@Override
	public java.util.Map<String, Object> getValuesForInsert(MtdTFunzione MtdTFunzione) {
		java.util.Map<String, Object> map = new java.util.HashMap<String, Object>();
		map.put("id_function", MtdTFunzione.getIdFunzione());
		map.put("fk_function_type", MtdTFunzione.getFkTipoFunzione());
		map.put("fk_metadata", MtdTFunzione.getFkMetadato());
		map.put("request_url", MtdTFunzione.getRequestUrl());
		return map;
	}

	@Override
	public java.util.Map<String, Object> getValuesForUpdate(MtdTFunzione MtdTFunzione) {
		java.util.Map<String, Object> map = new java.util.HashMap<String, Object>();
		map.put("fk_function_type", MtdTFunzione.getFkTipoFunzione());
		map.put("fk_metadata", MtdTFunzione.getFkMetadato());
		map.put("request_url", MtdTFunzione.getRequestUrl());
		map.put("id_function", MtdTFunzione.getIdFunzione());
		return map;
	}

	public java.util.Map<String, Object> getValuesForPrimaryKey(MtdTFunzione MtdTFunzione) {
		java.util.Map<String, Object> map = new java.util.HashMap<String, Object>();
		map.put("id_function", MtdTFunzione.getIdFunzione());
		return map;
	}

	@Override
	public java.util.Map<String, Object> getValuesForDelete(MtdTFunzione MtdTFunzione) {
		java.util.Map<String, Object> map = new java.util.HashMap<String, Object>();
		map.put("id_function", MtdTFunzione.getIdFunzione());
		return map;
	}

	@Override
	public RowMapper<MtdTFunzione> getRowMapper()  {
		//--- RowMapper to populate a new bean instance
		//return new MtdTFunzioneRowMapper( new MtdTFunzione() ) ;

       return new MtdTFunzioneRowMapper() ;
	}

	//----------------------------------------------------------------------
	/**
	 * Populates the given bean with the data retrieved from the given ResultSet
	 * @param rs
	 * @param MtdTFunzione
	 * @throws SQLException
	 */
	private static void populateBean(ResultSet rs, MtdTFunzione MtdTFunzione) throws SQLException {

		//--- Set data from ResultSet to Bean attributes
		MtdTFunzione.setIdFunzione(rs.getInt("id_function")); // java.lang.Integer
		if ( rs.wasNull() ) { MtdTFunzione.setIdFunzione(null); }; // not primitive number => keep null value if any
		MtdTFunzione.setFkTipoFunzione(rs.getInt("fk_function_type")); // java.lang.Integer
		if ( rs.wasNull() ) { MtdTFunzione.setFkTipoFunzione(null); }; // not primitive number => keep null value if any
		MtdTFunzione.setFkMetadato(rs.getInt("fk_metadata")); // java.lang.Integer
		if ( rs.wasNull() ) { MtdTFunzione.setFkMetadato(null); }; // not primitive number => keep null value if any
		MtdTFunzione.setRequestUrl(rs.getString("request_url")); // java.lang.String
	}


	/**
	 * Specific inner class for 'RowMapper' implementation
	 */
	public static class MtdTFunzioneRowMapper implements RowMapper<MtdTFunzione> {
	
		public MtdTFunzioneRowMapper() {
			
		}
		
		public MtdTFunzione mapRow(ResultSet rs, int rowNum) throws SQLException {
			MtdTFunzione bean = new MtdTFunzione();
			populateBean(rs, bean);
			return bean;
		}
	}
}
